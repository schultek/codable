// @dart = 3.8
import 'dart:convert';

import 'package:codable/core.dart';

part 'person.codable.dart';

//~@Codable(equatable:true,toString:true)
//!         arguments could be used to trigger creation of equatable and toString() methods 
class Person with PersonRaw {

  final String name;
  final int age;
  final double height;
  final bool isDeveloper;
  final Person? parent;
  final List<String> hobbies;
  final List<Person> friends;

}

/// Baseline implementations for encoding and decoding a [Person] instance.
///
/// This is how we usually encode and decode models in Dart (e.g. code generated by json_serializable).
/// Its used as a baseline against checking performance and correctness of the codable implementation.
mixin PersonRaw {
  static Person fromMapRaw(Map<String, dynamic> map) {
    return Person(
      map['name'] as String,
      (map['age'] as num).toInt(),
      (map['height'] as num).toDouble(),
      map['isDeveloper'] as bool,
      map['parent'] == null ? null : PersonRaw.fromMapRaw(map['parent'] as Map<String, dynamic>),
      (map['hobbies'] as List).cast<String>(),
      (map['friends'] as List).map((e) => PersonRaw.fromMapRaw(e as Map<String, dynamic>)).toList(),
    );
  }

  static Person fromJsonRaw(String json) {
    return fromMapRaw(jsonDecode(json) as Map<String, dynamic>);
  }

  static Person fromJsonBytesRaw(List<int> json) {
    return fromMapRaw(jsonBytes.decode(json) as Map<String, dynamic>);
  }

  Map<String, dynamic> toMapRaw() {
    final value = this as Person;
    return {
      'name': value.name,
      'age': value.age,
      'height': value.height,
      'isDeveloper': value.isDeveloper,
      'parent': value.parent?.toMapRaw(),
      'hobbies': value.hobbies,
      'friends': value.friends.map((e) => e.toMapRaw()).toList(),
    };
  }

  String toJsonRaw() {
    return jsonEncode(toMapRaw());
  }

  List<int> toJsonBytesRaw() {
    return jsonBytes.encode(toMapRaw());
  }
}

final jsonBytes = json.fuse(utf8);
